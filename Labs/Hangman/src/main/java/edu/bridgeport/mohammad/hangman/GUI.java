/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on Feb 21, 2012, 8:14:28 PM
 */
package edu.bridgeport.mohammad.hangman;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Mohammad Typaldos [mohammad at reliablerabbit.com]
 */
public class GUI extends javax.swing.JFrame implements ActionListener {
    private LetterButton[] alphabet = new LetterButton[26];
    private javax.swing.JLabel[] wordLetters;
    private Hangman hangman;

    /** Creates new form GUI */
    public GUI() {
        initComponents();
        generateAlphabet();
        newGame();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lettersPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        scoreLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        strikesLabel = new javax.swing.JLabel();
        usedLetterPanel = new javax.swing.JPanel();
        usedLettersLabel = new javax.swing.JLabel();
        newGameButton = new javax.swing.JButton();
        wordPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hangman");

        lettersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choose a letter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 14))); // NOI18N
        lettersPanel.setLayout(new java.awt.GridLayout(2, 13, 2, 2));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Score"));

        scoreLabel.setText("0");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(scoreLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(scoreLabel)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Strikes"));

        strikesLabel.setText("0");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(strikesLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(strikesLabel)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        usedLetterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Used Letters"));

        usedLettersLabel.setText("None");

        org.jdesktop.layout.GroupLayout usedLetterPanelLayout = new org.jdesktop.layout.GroupLayout(usedLetterPanel);
        usedLetterPanel.setLayout(usedLetterPanelLayout);
        usedLetterPanelLayout.setHorizontalGroup(
            usedLetterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(usedLetterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(usedLettersLabel)
                .addContainerGap(418, Short.MAX_VALUE))
        );
        usedLetterPanelLayout.setVerticalGroup(
            usedLetterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(usedLetterPanelLayout.createSequentialGroup()
                .add(usedLettersLabel)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        wordPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Word"));
        wordPanel.setLayout(new java.awt.GridLayout(1, 0, 0, 2));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(usedLetterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(lettersPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                    .add(newGameButton)
                    .add(wordPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(newGameButton)
                .add(18, 18, 18)
                .add(lettersPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(usedLetterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(wordPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        newGame();
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void newGame() {
        // load words.txt
        InputStream in = this.getClass().getResourceAsStream("/words.txt");
        String word = "Java";
        
        try {
            if(in != null) {
                String file = inputStreamToString(in);
                String[] words = file.split("\n");
                word = words[(int)(System.nanoTime() % words.length)];
            } else {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, "Unable to load words.txt");
            }
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        
        hangman = new Hangman(word);
        
        for(LetterButton alpha : alphabet) alpha.setEnabled(true);
        usedLettersLabel.setText("");
        
        if(wordLetters != null) {
            for(int i = 0; wordLetters.length > i; i++) {
                wordPanel.remove(wordLetters[i]);
            }
        }
        
        wordLetters = new javax.swing.JLabel[hangman.getRawWord().length()];
        char[] letters = hangman.getWordCharArray();
        for(int i = 0; letters.length > i; i++) {
            javax.swing.JLabel label = new javax.swing.JLabel();
            // gets set in updateComponets
            // label.setText(String.valueOf(letters[i]));
            wordLetters[i] = label;
            wordPanel.add(label);
        }
        
        
        updateComponets();
    }
    
    public void generateAlphabet(){
        int aValue = (int) 'A';
        for(int i = 0; i < 26; i++){
            alphabet[i] = new LetterButton((char)(aValue + i));
            alphabet[i].addActionListener(this);
            lettersPanel.add(alphabet[i]);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel lettersPanel;
    private javax.swing.JButton newGameButton;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel strikesLabel;
    private javax.swing.JPanel usedLetterPanel;
    private javax.swing.JLabel usedLettersLabel;
    private javax.swing.JPanel wordPanel;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent ae) {
        LetterButton letterClicked = (LetterButton)ae.getSource();
        char letter = letterClicked.getText().charAt(0);
        hangman.guessLetter(letter);
        letterClicked.setEnabled(false);
        usedLettersLabel.setText(usedLettersLabel.getText() + letter + ", ");
        updateComponets();
        
        if(hangman.isOver()) {
            for(LetterButton alpha : alphabet) {
                alpha.setEnabled(false);
            }
            requestFocus();
            if(hangman.didWin()) {
                javax.swing.JOptionPane.showMessageDialog(this, "You win!");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "You lose, the word was: " + hangman.getRawWord());
            }
        }
    }
    
    public void updateComponets() {
        updateStrikes();
        updateScore();
        updateWord();
    }
    
    public void updateStrikes() {
        strikesLabel.setText("" + hangman.getStrikes() + "/5");
    }
    
    public void updateScore() {
        scoreLabel.setText("" + hangman.getScore());
    }
    
    public void updateWord() {
        char[] letters = hangman.getWordCharArray();
        for(int i = 0; letters.length > i; i++) {
            wordLetters[i].setText(String.valueOf(letters[i]));
        }
    }
    
    /**
     * @param in InputStream that you want returned as a String
     * @return String value of in
     */
    private static String inputStreamToString(InputStream in) throws IOException {
        StringBuilder output = new StringBuilder();
        byte[] b = new byte[4096];
        for (int n; (n = in.read(b)) != -1;) {
            output.append(new String(b, 0, n));
        }
        return output.toString();
    }

}
